type Query {
  hello: String!
}

type Mutation {
  startDream(options: DreamOptionsInput!): Dream!
}

type Subscription {
  watchDream(dreamId: ID!): Dream!
}

scalar Upload

input DreamOptionsInput {
  prompt: String!
  numImages: Int!
  seed: Int
  baseImage: Upload
  baseImageDecimation: Float
  sampler: DreamSampler!
  samplerSteps: Int!
  samplerEta: Float!
  guidanceScale: Float!
}

enum DreamSampler {
  DDIM
  PLMS
}

interface Dream {
  id: ID!
  images: [DreamImage!]!
}

type PendingDream implements Dream {
  id: ID!
  images: [PendingDreamImage!]!
}

type RunningDream implements Dream {
  id: ID!
  images: [DreamImage!]!
  numFinishedImages: Int!
  numTotalImages: Int!
  numFinishedSteps: Int!
  numTotalSteps: Int!
}

type FinishedDream implements Dream {
  id: ID!
  seed: Int!
  images: [FinishedDreamImage!]!
}

type StoppedDream implements Dream {
  id: ID!
  images: [DreamImage!]!
  reason: StoppedDreamReason!
  message: String
}

enum StoppedDreamReason {
  DREAM_ERROR,
}

interface DreamImage {
  id: ID!
  dreamId: ID!
}

type PendingDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
}

type RunningDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
  previewImagePath: String
  numFinishedSteps: Int!
  numTotalSteps: Int!
}

type FinishedDreamImage implements DreamImage {
  id: ID!
  seed: Int!
  dreamId: ID!
  imagePath: String!
}

type StoppedDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
}
