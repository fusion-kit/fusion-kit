type Query {
  settings: Settings!
}

type Mutation {
  startDream(options: DreamOptionsInput!): Dream!
  updateSettings(newSettings: SettingsInput!): Settings!
}

type Subscription {
  watchDream(dreamId: ID!): Dream!
  downloadModel(modelId: ID!): ModelDownload!
}

scalar Upload

input DreamOptionsInput {
  prompt: String!
  numImages: Int!
  seed: Int
  width: Int
  height: Int
  baseImage: Upload
  baseImageMask: Upload
  baseImageMaskType: DreamBaseImageMaskType,
  baseImageDecimation: Float
  sampler: DreamSampler!
  samplerSteps: Int!
  samplerEta: Float!
  guidanceScale: Float!
}

enum DreamSampler {
  DDIM
  PLMS
}

enum DreamBaseImageMaskType {
  KEEP_MASKED,
  REPLACE_MASKED,
}

interface Dream {
  id: ID!
  images: [DreamImage!]!
}

type PendingDream implements Dream {
  id: ID!
  images: [PendingDreamImage!]!
}

type RunningDream implements Dream {
  id: ID!
  images: [DreamImage!]!
  numFinishedImages: Int!
  numTotalImages: Int!
  numFinishedSteps: Int!
  numTotalSteps: Int!
}

type FinishedDream implements Dream {
  id: ID!
  seed: Int!
  images: [FinishedDreamImage!]!
}

type StoppedDream implements Dream {
  id: ID!
  images: [DreamImage!]!
  reason: StoppedDreamReason!
  message: String
}

enum StoppedDreamReason {
  DREAM_ERROR,
}

interface DreamImage {
  id: ID!
  dreamId: ID!
}

type PendingDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
}

type RunningDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
  previewImagePath: String
  numFinishedSteps: Int!
  numTotalSteps: Int!
}

type FinishedDreamImage implements DreamImage {
  id: ID!
  seed: Int!
  dreamId: ID!
  imagePath: String!
}

type StoppedDreamImage implements DreamImage {
  id: ID!
  dreamId: ID!
}

type Settings {
  isReady: Boolean!
  availableDevices: [String!]!
  modelsFilePath: String!

  device: String!
  showPreviews: Boolean!
  stepsPerPreview: Int!
  useFullPrecision: Boolean!
  models: [SettingsModel!]!
  activeModel: SettingsModel
}

type SettingsModel {
  isActive: Boolean!
  id: ID!
  name: String!
  weightsFilename: String!
  configFilename: String!
  width: Int!
  height: Int!
}

input SettingsInput {
  device: String!
  showPreviews: Boolean!
  stepsPerPreview: Int!
  useFullPrecision: Boolean!
  models: [SettingsModelInput!]!
}

input SettingsModelInput {
  isActive: Boolean!
  id: ID!
  name: String!
  weightsFilename: String!
  configFilename: String!
  width: Int!
  height: Int!
}

type ModelDownloadComplete {
  id: ID!
  name: String!
  weightsFilename: String!
  configFilename: String!
  width: Int!
  height: Int!
}

type ModelDownloadProgress {
  downloadedBytes: Bytes!
  totalBytes: Bytes
}

scalar Bytes

type ModelDownloadError {
  message: String!
}

union ModelDownload = ModelDownloadComplete | ModelDownloadProgress | ModelDownloadError
